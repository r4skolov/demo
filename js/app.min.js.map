{"version":3,"file":"app.min.js","mappings":"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","sources":["webpack:///./source/js/components/MicroModal.js","webpack:///./source/js/index.js"],"sourcesContent":["const MicroModal = (() => {\n\tconst FOCUSABLE_ELEMENTS = [\n\t\t'a[href]',\n\t\t'area[href]',\n\t\t'input:not([disabled]):not([type=\"hidden\"]):not([aria-hidden])',\n\t\t'select:not([disabled]):not([aria-hidden])',\n\t\t'textarea:not([disabled]):not([aria-hidden])',\n\t\t'button:not([disabled]):not([aria-hidden])',\n\t\t'iframe',\n\t\t'object',\n\t\t'embed',\n\t\t'[contenteditable]',\n\t\t'[tabindex]:not([tabindex^=\"-\"])',\n\t];\n\n\tclass Modal {\n\t\tconstructor({\n\t\t\ttargetModal,\n\t\t\ttriggers = [],\n\t\t\tonShow = () => {\n\t\t\t},\n\t\t\tonClose = () => {\n\t\t\t},\n\t\t\topenTrigger = 'data-micromodal-trigger',\n\t\t\tcloseTrigger = 'data-micromodal-close',\n\t\t\topenClass = 'is-open',\n\t\t\tdisableScroll = true,\n\t\t\tdisableScrollElement = [],\n\t\t\tdisableFocus = true,\n\t\t\tbackFocus = true,\n\t\t\tawaitCloseAnimation = false,\n\t\t\tawaitOpenAnimation = false,\n\t\t\tdisableEsc = false,\n\t\t\tdebugMode = false,\n\t\t}) {\n\t\t\t// Save a reference of the modal\n\t\t\tthis.modal = document.getElementById(targetModal);\n\n\t\t\t// Save a reference to the passed config\n\t\t\tthis.config = {\n\t\t\t\tdebugMode,\n\t\t\t\tdisableScroll,\n\t\t\t\tdisableScrollElement,\n\t\t\t\topenTrigger,\n\t\t\t\tcloseTrigger,\n\t\t\t\topenClass,\n\t\t\t\tonShow,\n\t\t\t\tonClose,\n\t\t\t\tawaitCloseAnimation,\n\t\t\t\tawaitOpenAnimation,\n\t\t\t\tdisableFocus,\n\t\t\t\tbackFocus,\n\t\t\t\tdisableEsc,\n\t\t\t};\n\n\t\t\t// Register click events only if pre binding eventListeners\n\t\t\tif (triggers.length > 0) this.registerTriggers(...triggers);\n\n\t\t\t// pre bind functions for event listeners\n\t\t\tthis.onClick   = this.onClick.bind(this);\n\t\t\tthis.onKeydown = this.onKeydown.bind(this);\n\t\t}\n\n\t\t/**\n\t\t * Loops through all openTriggers and binds click event\n\t\t * @param  {array} triggers [Array of node elements]\n\t\t * @return {void}\n\t\t */\n\t\tregisterTriggers(...triggers) {\n\t\t\ttriggers.filter(Boolean).forEach((trigger) => {\n\t\t\t\ttrigger.addEventListener('click', (event) => this.showModal(event));\n\t\t\t});\n\t\t}\n\n\t\tshowModal(event = null) {\n\t\t\tthis.activeElement = document.activeElement;\n\t\t\tthis.modal.setAttribute('aria-hidden', 'false');\n\n\t\t\tdocument.querySelectorAll('.modal.is-open').forEach((modal) => {\n\t\t\t\tmodal.classList.remove('is-open');\n\t\t\t});\n\n\t\t\tthis.modal.classList.add('is-open');\n\t\t\tthis.scrollBehaviour('disable');\n\t\t\tthis.addEventListeners();\n\n\t\t\tif (this.config.awaitOpenAnimation) {\n\t\t\t\tconst handler = () => {\n\t\t\t\t\tthis.modal.removeEventListener('animationend', handler, false);\n\t\t\t\t\tthis.setFocusToFirstNode();\n\t\t\t\t};\n\t\t\t\tthis.modal.addEventListener('animationend', handler, false);\n\t\t\t} else {\n\t\t\t\tthis.setFocusToFirstNode();\n\t\t\t}\n\n\t\t\tthis.config.onShow(this.modal, this.activeElement, event);\n\t\t}\n\n\t\tcloseModal(event = null) {\n\t\t\tconst _this   = this;\n\t\t\tconst {modal} = _this;\n\t\t\t_this.modal.setAttribute('aria-hidden', 'true');\n\t\t\t_this.removeEventListeners();\n\n\t\t\tif (_this.activeElement && _this.activeElement.focus) {\n\t\t\t\tif (_this.config.backFocus) {\n\t\t\t\t\t_this.activeElement.focus();\n\t\t\t\t}\n\t\t\t}\n\t\t\t_this.config.onClose(_this.modal, _this.activeElement, event);\n\n\t\t\tif (this.config.awaitCloseAnimation) {\n\t\t\t\tconst {openClass} = _this.config;\n\t\t\t\tthis.modal.addEventListener('animationend', function handler() {\n\t\t\t\t\tmodal.classList.remove(openClass);\n\t\t\t\t\t_this.scrollBehaviour('enable');\n\t\t\t\t\tmodal.removeEventListener('animationend', handler, false);\n\t\t\t\t}, false);\n\t\t\t} else {\n\t\t\t\tmodal.classList.remove(this.config.openClass);\n\t\t\t\t_this.scrollBehaviour('enable');\n\t\t\t}\n\t\t}\n\n\t\tcloseModalById(targetModal) {\n\t\t\tthis.modal = document.getElementById(targetModal);\n\t\t\tif (this.modal) this.closeModal();\n\t\t}\n\n\t\t// eslint-disable-next-line class-methods-use-this\n\t\tgetSizeScrollbar() {\n\t\t\treturn window.innerWidth - document.documentElement.clientWidth;\n\t\t}\n\n\t\tgetScrollShiftNodes() {\n\t\t\tif (!this.config.disableScrollElement.length) return false;\n\t\t\tconst nodes = document.querySelectorAll(this.config.disableScrollElement);\n\t\t\treturn Array(...nodes);\n\t\t}\n\n\t\tscrollBehaviour(toggle) {\n\t\t\tif (!this.config.disableScroll) return;\n\t\t\tconst body               = document.querySelector('body');\n\t\t\tconst scrollShiftElement = this.getScrollShiftNodes();\n\t\t\tconst scrollSize         = this.getSizeScrollbar();\n\t\t\tswitch (toggle) {\n\t\t\t\tcase 'enable':\n\t\t\t\t\tObject.assign(document.documentElement.style, {\n\t\t\t\t\t\tmarginRight:'',\n\t\t\t\t\t\toverflow   :'',\n\t\t\t\t\t});\n\t\t\t\t\tObject.assign(body.style, {\n\t\t\t\t\t\toverflow:'',\n\t\t\t\t\t});\n\t\t\t\t\tif (scrollShiftElement) {\n\t\t\t\t\t\tscrollShiftElement.forEach((item) => {\n\t\t\t\t\t\t\tObject.assign(item.style, {\n\t\t\t\t\t\t\t\tmarginRight:'',\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'disable':\n\t\t\t\t\tObject.assign(document.documentElement.style, {\n\t\t\t\t\t\tmarginRight:`${scrollSize}px`,\n\t\t\t\t\t\toverflow   :'hidden',\n\t\t\t\t\t});\n\t\t\t\t\tObject.assign(body.style, {\n\t\t\t\t\t\toverflow:'hidden',\n\t\t\t\t\t});\n\t\t\t\t\tif (scrollShiftElement) {\n\t\t\t\t\t\tscrollShiftElement.forEach((item) => {\n\t\t\t\t\t\t\tObject.assign(item.style, {\n\t\t\t\t\t\t\t\tmarginRight:`${scrollSize}px`,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t}\n\t\t}\n\n\t\taddEventListeners() {\n\t\t\tthis.modal.addEventListener('touchstart', this.onClick);\n\t\t\tthis.modal.addEventListener('click', this.onClick);\n\t\t\tdocument.addEventListener('keydown', this.onKeydown);\n\t\t}\n\n\t\tremoveEventListeners() {\n\t\t\tthis.modal.removeEventListener('touchstart', this.onClick);\n\t\t\tthis.modal.removeEventListener('click', this.onClick);\n\t\t\tdocument.removeEventListener('keydown', this.onKeydown);\n\t\t}\n\n\t\t/**\n\t\t * Handles all click events from the modal.\n\t\t * Closes modal if a target matches the closeTrigger attribute.\n\t\t * @param {*} event Click Event\n\t\t */\n\t\tonClick(event) {\n\t\t\tif (\n\t\t\t\tevent.target.hasAttribute(this.config.closeTrigger)\n\t\t\t\t|| event.target.parentNode.hasAttribute(this.config.closeTrigger)\n\t\t\t) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\tevent.stopPropagation();\n\t\t\t\tthis.closeModal(event);\n\t\t\t}\n\t\t}\n\n\t\tonKeydown(event) {\n\t\t\tif (!this.config.disableEsc) {\n\t\t\t\tif (event.keyCode === 27) this.closeModal(event);\n\t\t\t} // esc\n\t\t\tif (event.keyCode === 9) this.retainFocus(event); // tab\n\t\t}\n\n\t\tgetFocusableNodes() {\n\t\t\tconst nodes = this.modal.querySelectorAll(FOCUSABLE_ELEMENTS);\n\t\t\treturn Array(...nodes);\n\t\t}\n\n\t\t/**\n\t\t * Tries to set focus on a node which is not a close trigger\n\t\t * if no other nodes exist then focuses on first close trigger\n\t\t */\n\t\tsetFocusToFirstNode() {\n\t\t\tif (this.config.disableFocus) return;\n\n\t\t\tconst focusableNodes = this.getFocusableNodes();\n\n\t\t\t// no focusable nodes\n\t\t\tif (focusableNodes.length === 0) return;\n\n\t\t\t// remove nodes on whose click, the modal closes\n\t\t\t// could not think of a better name :(\n\t\t\tconst nodesWhichAreNotCloseTargets = focusableNodes.filter((node) => !node.hasAttribute(this.config.closeTrigger));\n\n\t\t\tif (nodesWhichAreNotCloseTargets.length > 0) nodesWhichAreNotCloseTargets[0].focus();\n\t\t\tif (nodesWhichAreNotCloseTargets.length === 0) focusableNodes[0].focus();\n\t\t}\n\n\t\tretainFocus(event) {\n\t\t\tlet focusableNodes = this.getFocusableNodes();\n\n\t\t\t// no focusable nodes\n\t\t\tif (focusableNodes.length === 0) return;\n\n\t\t\t/**\n\t\t\t * Filters nodes which are hidden to prevent\n\t\t\t * focus leak outside modal\n\t\t\t */\n\t\t\tfocusableNodes = focusableNodes.filter((node) => (node.offsetParent !== null));\n\n\t\t\t// if disableFocus is true\n\t\t\tif (!this.modal.contains(document.activeElement)) {\n\t\t\t\tfocusableNodes[0].focus();\n\t\t\t} else {\n\t\t\t\tconst focusedItemIndex = focusableNodes.indexOf(document.activeElement);\n\n\t\t\t\tif (event.shiftKey && focusedItemIndex === 0) {\n\t\t\t\t\tfocusableNodes[focusableNodes.length - 1].focus();\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\n\t\t\t\tif (!event.shiftKey && focusableNodes.length > 0 && focusedItemIndex === focusableNodes.length - 1) {\n\t\t\t\t\tfocusableNodes[0].focus();\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Modal prototype ends.\n\t * Here on code is responsible for detecting and\n\t * auto binding event handlers on modal triggers\n\t */\n\n\t\t  // Keep a reference to the opened modal\n\tlet activeModal    = null;\n\tconst activeModals = {};\n\n\t/**\n\t * Generates an associative array of modals and it's\n\t * respective triggers\n\t * @param  {array} triggers     An array of all triggers\n\t * @param  {string} triggerAttr The data-attribute which triggers the module\n\t * @return {array}\n\t */\n\tconst generateTriggerMap = (triggers, triggerAttr) => {\n\t\tconst triggerMap = [];\n\n\t\ttriggers.forEach((trigger) => {\n\t\t\tconst targetModal = trigger.attributes[triggerAttr].value;\n\t\t\tif (triggerMap[targetModal] === undefined) triggerMap[targetModal] = [];\n\t\t\ttriggerMap[targetModal].push(trigger);\n\t\t});\n\n\t\treturn triggerMap;\n\t};\n\n\t/**\n\t * Validates whether a modal of the given id exists\n\t * in the DOM\n\t * @param  {number} id  The id of the modal\n\t * @return {boolean}\n\t */\n\tconst validateModalPresence = (id) => {\n\t\tif (!document.getElementById(id)) {\n\t\t\tconsole.warn(\n\t\t\t\t`MicroModal: \\u2757Seems like you have missed %c'${id}'`,\n\t\t\t\t'background-color: #f8f9fa;color: #50596c;font-weight: bold;',\n\t\t\t\t'ID somewhere in your code. Refer example below to resolve it.',\n\t\t\t);\n\t\t\tconsole.warn(\n\t\t\t\t'%cExample:',\n\t\t\t\t'background-color: #f8f9fa;color: #50596c;font-weight: bold;',\n\t\t\t\t`<div class=\"modal\" id=\"${id}\"></div>`,\n\t\t\t);\n\t\t\treturn false;\n\t\t}\n\t};\n\n\t/**\n\t * Validates if there are modal triggers present\n\t * in the DOM\n\t * @param  {array} triggers An array of data-triggers\n\t * @return {boolean}\n\t */\n\tconst validateTriggerPresence = (triggers) => {\n\t\tif (triggers.length <= 0) {\n\t\t\tconsole.warn(\n\t\t\t\t'MicroModal: \\u2757Please specify at least one %c\\'micromodal-trigger\\'',\n\t\t\t\t'background-color: #f8f9fa;color: #50596c;font-weight: bold;',\n\t\t\t\t'data attribute.',\n\t\t\t);\n\t\t\tconsole.warn(\n\t\t\t\t'%cExample:',\n\t\t\t\t'background-color: #f8f9fa;color: #50596c;font-weight: bold;',\n\t\t\t\t'<a href=\"#\" data-micromodal-trigger=\"my-modal\"></a>',\n\t\t\t);\n\t\t\treturn false;\n\t\t}\n\t};\n\n\t/**\n\t * Checks if triggers and their corresponding modals\n\t * are present in the DOM\n\t * @param  {array} triggers   Array of DOM nodes which have data-triggers\n\t * @param  {array} triggerMap Associative array of modals and their triggers\n\t * @return {boolean}\n\t */\n\tconst validateArgs = (triggers, triggerMap) => {\n\t\tvalidateTriggerPresence(triggers);\n\t\tif (!triggerMap) return true;\n\t\tfor (const id in triggerMap) validateModalPresence(id);\n\t\treturn true;\n\t};\n\n\t/**\n\t * Binds click handlers to all modal triggers\n\t * @param  {object} config [description]\n\t * @return void\n\t */\n\tconst init = (config) => {\n\t\t// Create an config object with default openTrigger\n\t\tconst options = {openTrigger:'data-micromodal-trigger', ...config};\n\n\t\t// Collects all the nodes with the trigger\n\t\tconst triggers = [...document.querySelectorAll(`[${options.openTrigger}]`)];\n\n\t\t// Makes a mappings of modals with their trigger nodes\n\t\tconst triggerMap = generateTriggerMap(triggers, options.openTrigger);\n\n\t\t// Checks if modals and triggers exist in dom\n\t\tif (options.debugMode === true && validateArgs(triggers, triggerMap) === false) return;\n\n\t\t// For every target modal creates a new instance\n\t\tfor (const key in triggerMap) {\n\t\t\tconst value         = triggerMap[key];\n\t\t\toptions.targetModal = key;\n\t\t\toptions.triggers    = [...value];\n\t\t\tactiveModal         = new Modal(options); // eslint-disable-line no-new\n\t\t\tactiveModals[key]   = activeModal;\n\t\t}\n\t};\n\n\t/**\n\t * Shows a particular modal\n\t * @param  {string} targetModal [The id of the modal to display]\n\t * @param  {object} config [The configuration object to pass]\n\t * @return {void}\n\t */\n\tconst show = (targetModal, config) => {\n\t\tconst options       = config || {};\n\t\toptions.targetModal = targetModal;\n\n\t\t// Checks if modals and triggers exist in dom\n\t\tif (options.debugMode === true && validateModalPresence(targetModal) === false) return;\n\n\t\t// clear events in case previous modal wasn't closed\n\t\tif (activeModal) activeModal.removeEventListeners();\n\n\t\t// stores reference to active modal\n\t\tactiveModal = new Modal(options); // eslint-disable-line no-new\n\t\tactiveModal.showModal();\n\t};\n\n\t/**\n\t * Closes the active modal\n\t * @param  {string} targetModal [The id of the modal to close]\n\t * @return {void}\n\t */\n\tconst close = (targetModal) => {\n\t\ttargetModal ? activeModals[targetModal].closeModalById(targetModal) : activeModals[targetModal].closeModal();\n\t};\n\n\treturn {\n\t\tinit,\n\t\tshow,\n\t\tclose,\n\t};\n})();\n\nexport default MicroModal;\n\nif (typeof window !== 'undefined') {\n\twindow.MicroModal = MicroModal;\n}\n","import MicroModal   from './components/MicroModal';\n\nfunction modal() {\n\tconst settings = {\n\t\topenTrigger         : 'data-modal-open',\n\t\tcloseTrigger        : 'data-modal-close',\n\t\topenClass           : 'is-open',\n\t\tawaitOpenAnimation  : true,\n\t\tawaitCloseAnimation : true,\n\t};\n\n\tMicroModal.init(settings);\n\n\tconst modalCloseLink = document.querySelector('.js-modal-close');\n\tif (modalCloseLink) {\n\t\tmodalCloseLink.addEventListener('click', (e) => {\n\t\t\te.preventDefault();\n\t\t\tconst { id } = e.target.dataset;\n\t\t\tif (id) {\n\t\t\t\tMicroModal.close(id, settings);\n\t\t\t}\n\t\t});\n\t}\n}\n// Init\nfunction init() {\n\tmodal();\n}\n\n(function () {\n\tinit();\n}());\n"],"names":["MicroModal","FOCUSABLE_ELEMENTS","Modal","constructor","targetModal","triggers","onShow","onClose","openTrigger","closeTrigger","openClass","disableScroll","disableScrollElement","disableFocus","backFocus","awaitCloseAnimation","awaitOpenAnimation","disableEsc","debugMode","this","modal","document","getElementById","config","length","registerTriggers","onClick","bind","onKeydown","filter","Boolean","forEach","trigger","addEventListener","event","showModal","activeElement","setAttribute","querySelectorAll","classList","remove","add","scrollBehaviour","addEventListeners","handler","removeEventListener","setFocusToFirstNode","closeModal","_this","removeEventListeners","focus","closeModalById","getSizeScrollbar","window","innerWidth","documentElement","clientWidth","getScrollShiftNodes","nodes","Array","toggle","body","querySelector","scrollShiftElement","scrollSize","Object","assign","style","marginRight","overflow","item","target","hasAttribute","parentNode","preventDefault","stopPropagation","keyCode","retainFocus","getFocusableNodes","focusableNodes","nodesWhichAreNotCloseTargets","node","offsetParent","contains","focusedItemIndex","indexOf","shiftKey","activeModal","activeModals","validateModalPresence","id","console","warn","validateArgs","triggerMap","validateTriggerPresence","init","options","generateTriggerMap","triggerAttr","attributes","value","undefined","push","key","show","close","settings","modalCloseLink","e","dataset"],"sourceRoot":""}